from activities.constants import ACTIVITY_ACTION 

from django.shortcuts import get_object_or_404
from django.core import serializers

from annoying.functions import get_object_or_None

from .models import Board, Referral, BoardMember


class ArchiveMemberMixIn():
    """
        This mix in was created so that the archive member code can be recycled
    """

    def remove_member(self, to_remove_email, board, user):
        # Referral removal
        action = "REMOVED"
        if user.email == to_remove_email:
            action = "LEFT"
        referral_exists= get_object_or_None(Referral,
                email=to_remove_email, board_member__board=board, is_active= True)
        if referral_exists:
            Referral.objects.filter(
                email= to_remove_email,is_active=True).update(is_active=False)
            board_member = referral_exists.board_member
            board_member.is_active = False
            board_member.save()
            board_member.activity.create(user=user,
                            action=ACTIVITY_ACTION[action],
                            board=board)
        else:
            board_member= get_object_or_None(
                BoardMember, user__email=to_remove_email, board=board, is_active = True)
            if board_member:
                board_member.is_active = False
                board_member.save()
                board_member.activity.create(user=user,
                            action=ACTIVITY_ACTION[action],
                            board=board)


class GetBoardMixIn():

    def get_board(self):
        board_id= self.kwargs.get('board_id')
        board = get_object_or_404(Board, pk=board_id)
        return board


class JoinBoardMixIn():

    def complete_validation(self, user):
        token = self.kwargs.get("token")
        referral = get_object_or_None(Referral, token=token, is_active=True)
        if referral.board_member.user:
            board_member=referral.board_member
            board_member.is_confirmed = True
        else:
            board_member=referral.board_member
            board_member.is_confirmed = True
            board_member.user = user
        # cleaning all the referral tokens that was generated by the invite
        Referral.objects.filter(
            board_member=board_member,is_active=True).update(is_active=False)
        board_member.save()
        board_member.activity.create(
            user=board_member.user, action=ACTIVITY_ACTION['JOINED'],
            board=referral.board_member.board)
        return board_member
